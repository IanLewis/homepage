user root; # meh.
worker_processes  1;

error_log stderr;

events {
  worker_connections  1024;
}

http {
    access_log /dev/stdout;

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        # Redirect naked domain accesses on HTTP to www
        listen 8000;
        server_name     ianlewis.org    staging.ianlewis.org;
        return          301 https://www.$host$request_uri;
    }
    server {
        # HTTP redirects to HTTPS.
        listen 8000;
        server_name     www.ianlewis.org    www.staging.ianlewis.org;

        # ... but forward status requests to the app server.
        location /_status {
            proxy_pass http://localhost:8080;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        }

        location / {
            return          301 https://$host$request_uri;
        }
    }
    server {
        # HTTP default server returns 403 when the host is incorrect.
        listen 8000 default_server;
        return 403;
    }

    server {
        # Redirect naked domain accesses on HTTPS to www
        listen 8001 ssl http2;
        server_name     ianlewis.org    staging.ianlewis.org;

        ssl_certificate     /secrets/webfront-crt;
        ssl_certificate_key /secrets/webfront-key;

        return          301 https://www.$host$request_uri;
    }
    server {
        # HTTPS
        listen 8001 ssl http2;
        server_name     www.ianlewis.org    www.staging.ianlewis.org;

        ssl_certificate     /secrets/webfront-crt;
        ssl_certificate_key /secrets/webfront-key;

        # Forward to app server.
        location / {
            proxy_pass http://localhost:8080;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        }
    }

    server {
        # HTTPS default server returns 403 when the host is incorrect.
        # If the host is wrong then the browser will show a warning message
        # but this should show a 403 if they click through.
        listen 8001 ssl http2 default_server;

        ssl_certificate     /secrets/webfront-crt;
        ssl_certificate_key /secrets/webfront-key;

        return 403;
    }
}
